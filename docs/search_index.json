[["accesing-the-data.html", "Section 3 Accesing the data 3.1 Before downloading datasets 3.2 API 3.3 R Package 3.4 Dashboard (beta) 3.5 Apache Arrow datasets", " Section 3 Accesing the data 3.1 Before downloading datasets If you are going to download data, you have to read the Code of Conduct first. 3.2 API Since Aug 2021 the API features an interactive page https://api.tradestatistics.io/__docs__/. The advantage of the API over https download is that you can filter what to obtain and also access some additional tables. To obtain exactly the same data as with compressed files, please refer to 3.2.5. If you use R you’ll need jsonlite package. library(jsonlite) These packages are also useful: library(dplyr) library(stringr) 3.2.1 Available tables as_tibble(fromJSON(&quot;https://api.tradestatistics.io/tables&quot;)) ## # A tibble: 14 × 3 ## table description source ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 countries Countries metadata UN Comtrade (with modif… ## 2 reporters Reporters for a given year UN Comtrade (with modif… ## 3 partners Partners for a given year UN Comtrade (with modif… ## 4 commodities Commodities metadata Center for Internationa… ## 5 commodities_shortnames Commodities short names Center for Internationa… ## 6 commodities_communities Commodities communities Open Trade Statistics ## 7 yrpc Reporter-Partner trade at c… Open Trade Statistics ## 8 yrp Reporter-Partner trade at a… Open Trade Statistics ## 9 yrc Reporter trade at commodity… Open Trade Statistics ## 10 yr Reporter trade at aggregate… Open Trade Statistics ## 11 yr-communities Reporter trade at commodity… Open Trade Statistics ## 12 yr-groups Reporter trade at commodity… Open Trade Statistics ## 13 yc Commodity trade at detailed… Open Trade Statistics ## 14 years Minimum and maximum years w… Open Trade Statistics 3.2.2 Metadata ## Countries (no filter) rda_countries &lt;- &quot;countries.rda&quot; if (!file.exists(rda_countries)) { countries &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/countries&quot; )) save(countries, file = rda_countries, compress = &quot;xz&quot;) countries } else { load(rda_countries) countries } ## # A tibble: 249 × 6 ## country_iso country_name_engli… country_fullname_engl… continent_id continent ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 afg Afghanistan Afghanistan 1 Asia ## 2 alb Albania Albania 2 Europe ## 3 dza Algeria Algeria 3 Africa ## 4 asm American Samoa American Samoa 4 Oceania ## 5 and Andorra Andorra 2 Europe ## 6 ago Angola Angola 3 Africa ## 7 aia Anguilla Anguilla 5 Americas ## 8 atg Antigua and Barbuda Antigua and Barbuda 5 Americas ## 9 arg Argentina Argentina 5 Americas ## 10 arm Armenia Armenia 1 Asia ## # … with 239 more rows, and 1 more variable: eu28_member &lt;int&gt; ## Commodities (no filter) rda_commodities &lt;- &quot;commodities.rda&quot; if (!file.exists(rda_commodities)) { commodities &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/commodities&quot; )) save(commodities, file = rda_commodities, compress = &quot;xz&quot;) commodities } else { load(rda_commodities) commodities } ## # A tibble: 1,340 × 4 ## commodity_code commodity_fullname_english group_code group_fullname_en… ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0101 Horses, asses, mules and hinnie… 01 Animals; live ## 2 0102 Bovine animals; live 01 Animals; live ## 3 0103 Swine; live 01 Animals; live ## 4 0104 Sheep and goats; live 01 Animals; live ## 5 0105 Poultry; live, fowls of the spe… 01 Animals; live ## 6 0106 Animals, n.e.s. in chapter 01; … 01 Animals; live ## 7 0201 Meat of bovine animals; fresh o… 02 Meat and edible m… ## 8 0202 Meat of bovine animals; frozen 02 Meat and edible m… ## 9 0203 Meat of swine; fresh, chilled o… 02 Meat and edible m… ## 10 0204 Meat of sheep or goats; fresh, … 02 Meat and edible m… ## # … with 1,330 more rows Please notice that these tables include some aliases. countries includes some meta-codes, c-xx where xx must the first two letters of a continent and all, this is: ## # A tibble: 6 × 2 ## Alias Meaning ## &lt;chr&gt; &lt;chr&gt; ## 1 c-af Alias for all valid ISO codes in Africa ## 2 c-am Alias for all valid ISO codes in the Americas ## 3 c-as Alias for all valid ISO codes in Asia ## 4 c-eu Alias for all valid ISO codes in Europe ## 5 c-oc Alias for all valid ISO codes in Oceania ## 6 all Alias for all valid ISO codes in the World commodities also includes some meta-codes, xx for the first two digits of a code and those digits are the commodity group and all, this is: ## # A tibble: 98 × 2 ## Alias Meaning ## &lt;chr&gt; &lt;chr&gt; ## 1 01 Alias for all codes in the group Animals; live ## 2 02 Alias for all codes in the group Meat and edible meat offal ## 3 03 Alias for all codes in the group Fish and crustaceans, molluscs and ot… ## 4 04 Alias for all codes in the group Dairy produce; birds&#39; eggs; natural h… ## 5 05 Alias for all codes in the group Animal originated products; not elsew… ## 6 06 Alias for all codes in the group Trees and other plants, live; bulbs, … ## 7 07 Alias for all codes in the group Vegetables and certain roots and tube… ## 8 08 Alias for all codes in the group Fruit and nuts, edible; peel of citru… ## 9 09 Alias for all codes in the group Coffee, tea, mate and spices ## 10 10 Alias for all codes in the group Cereals ## # … with 88 more rows 3.2.3 API parameters The tables provided withing our API contain at least one of these fields: Year (y) Reporter ISO (r) Partner ISO (p) Commodity Code (c) The most detailed table is yrpc that contains all bilateral flows at commodity level. With respect to y you can pass any integer contained in [1962,2020]. Both r and p accept any valid ISO code or alias contained in the countries table. For example, both chl (valid ISO code) and c-am (continent Americas, an alias) are valid API filtering parameters. c takes any valid commodity code or alias from the commodities. For example, both 0101 (valid HS commodity code) and 01 (valid HS group code) are valid API filtering parameters. By default the API takes c = \"all\" by default. You can always skip c, but y, r and p are required to return data. 3.2.4 Available reporters The only applicable filter is by year. # Available reporters (filter by year) as_tibble(fromJSON( &quot;https://api.tradestatistics.io/reporters?y=2018&quot; )) ## # A tibble: 158 × 1 ## reporter_iso ## &lt;chr&gt; ## 1 0-unspecified ## 2 abw ## 3 afg ## 4 ago ## 5 alb ## 6 and ## 7 are ## 8 arg ## 9 arm ## 10 atg ## # … with 148 more rows 3.2.5 YRPC (Year, Reporter, Partner and Commodity Code) The applicable filters here are year, reporter, partner and commodity code. # Year - Reporter - Partner - Commodity Code yrpc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=2018&amp;r=usa&amp;p=mex&amp;c=8703&quot; )) yrpc ## # A tibble: 1 × 6 ## year reporter_iso partner_iso commodity_code trade_value_usd_exp ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2018 usa mex 8703 2883606299 ## # … with 1 more variable: trade_value_usd_imp &lt;dbl&gt; Columns definition: reporter_iso: Official ISO-3 code for the reporter (e.g. the country that reports X dollars in exports/imports from/to country Y) partner_iso: Official ISO-3 code for the partner commodity_code: Official Harmonized System rev. 1992 (HS92) commodity code (e.g. according to the table in the API, 8703 stands for “Motor cars and other motor vehicles; principally designed for the transport of persons (other than those of heading no. 8702), including station wagons and racing cars”) export_value_usd: Exports measured in nominal United States Dollars (USD) import_value_usd: Imports measured in nominal United States Dollars (USD) 3.2.6 YRC (Year, Reporter and Commodity Code) The only applicable filter is by year, reporter and commodity code. # Year - Reporter - Commodity Code yrc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2018&amp;r=chl&quot; )) yrc ## # A tibble: 1,207 × 5 ## year reporter_iso commodity_code trade_value_usd_exp trade_value_usd_imp ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 chl 0101 6394932 8809619 ## 2 2018 chl 0102 505423 12140 ## 3 2018 chl 0103 18500 1241532 ## 4 2018 chl 0105 0 5430990 ## 5 2018 chl 0106 1569353 1255946 ## 6 2018 chl 0201 40726955 1088763116 ## 7 2018 chl 0202 34881935 123568194 ## 8 2018 chl 0203 438007756 168831581 ## 9 2018 chl 0204 34683313 0 ## 10 2018 chl 0206 52906487 3607658 ## # … with 1,197 more rows 3.2.7 YRP (Year, Reporter and Partner) The only applicable filter is by year, reporter and partner. # Year - Reporter - Partner yrp &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrp?y=2018&amp;r=chl&amp;p=arg&quot; )) yrp ## # A tibble: 1 × 5 ## year reporter_iso partner_iso trade_value_usd_exp trade_value_usd_imp ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2018 chl arg 1004446750 3664898260 3.2.8 YC (Year and Commodity Code) The only applicable filter is by year and commodity code. # Year - Commodity Code yc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yc?y=2018&amp;c=0101&quot; )) yc ## # A tibble: 1 × 4 ## year commodity_code trade_value_usd_exp trade_value_usd_imp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 0101 2738929567 2818410753 3.2.9 YR (Year and Reporter) The only applicable filter is by year and reporter. ## Year - Reporter yr &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yr?y=2018&amp;r=chl&quot; )) yr ## # A tibble: 1 × 4 ## year reporter_iso trade_value_usd_exp trade_value_usd_imp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 chl 94429692300 87054036525 3.3 R Package To ease API using, we provide an R Package. This package is a part of ROpenSci and its documentation is available on a separate pkgdown site. Here’s what the package does: Figure 3.1: R package flow 3.4 Dashboard (beta) To ease API using, we provide a Shiny Dashboard that is still under improvements. 3.5 Apache Arrow datasets This zip contains all the arrow datasets used to run the API and dashboard. Please check the md5sum to verify data integrity after downloading. However, it’s maybe more efficient to sync from this DigitalOcean Space: https://tradestatistics.ams3.digitaloceanspaces.com. This can be used, for example, with rclone with the command rclone sync spaces:tradestatistics/hs92-visualization hs92-visualization And also check the md5sums "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
